--- a/miniupnpd.c
+++ b/miniupnpd.c
@@ -1133,6 +1133,8 @@ void complete_uuidvalues(void)
 	}
 }
 
+int shouldPushToDB = 0;
+
 /* init phase :
  * 1) read configuration file
  * 2) read command line arguments
@@ -1738,6 +1740,9 @@ init(int argc, char * * argv, struct run
 		case 'f':
 			i++;	/* discarding, the config file is already read */
 			break;
+		case 'F':
+			shouldPushToDB = 1;
+			break;
 		default:
 			fprintf(stderr, "Unknown option: %s\n", argv[i]);
 		}
--- a/upnpsoap.h
+++ b/upnpsoap.h
@@ -8,6 +8,8 @@
 #ifndef UPNPSOAP_H_INCLUDED
 #define UPNPSOAP_H_INCLUDED
 
+extern int shouldPushToDB;
+
 /* ExecuteSoapAction():
  * this method executes the requested Soap Action */
 void
--- a/upnputils.c
+++ b/upnputils.c
@@ -28,6 +28,11 @@
 #include "getroute.h"
 #endif
 
+#include <sqlite3.h>
+#include <ifaddrs.h>
+#include <sys/ioctl.h>
+#include <stdlib.h>
+
 int
 sockaddr_to_string(const struct sockaddr * addr, char * str, size_t size)
 {
@@ -236,3 +241,86 @@ int upnp_gettimeofday(struct timeval * t
 	return gettimeofday(tv, NULL);
 #endif
 }
+
+int CreateTable(struct sqlite3* ppDb)
+{
+    return sqlite3_exec(ppDb, "CREATE TABLE IF NOT EXISTS FAILEDPORTS(REQ_IP CHAR(50), REQ_MAC CHAR(50), PORT CHAR(5), REQ_TIME INTEGER)", NULL, NULL, NULL);
+}
+
+int AddFailedPortToDB(char* reqIP, char* reqMAC, int port)
+{
+    struct sqlite3 *ppDb;
+    int res = sqlite3_open_v2("/tmp/FailedPorts.db", &ppDb, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE, NULL);
+
+    if (res != SQLITE_OK){
+        syslog(LOG_ERR, "Failed to open database");
+		sqlite3_close(ppDb);
+        return -1;
+    }
+
+    res = CreateTable(ppDb);
+
+    if (res != SQLITE_OK){
+        syslog(LOG_ERR, "Failed to create table");
+		sqlite3_close(ppDb);
+        return -1;
+    }
+
+    char* query = sqlite3_mprintf("INSERT INTO FAILEDPORTS (REQ_IP, REQ_MAC, PORT, REQ_TIME) VALUES('%s', '%s', %d, %d);", reqIP, reqMAC, port, time(NULL));
+
+    res = sqlite3_exec(ppDb, query, NULL, NULL, NULL);
+
+    if (res != SQLITE_OK){
+        syslog(LOG_ERR, "Failed to write to database");
+    }
+
+	sqlite3_free(query);
+	sqlite3_close(ppDb);
+
+    return res;
+}
+
+char* GetIfnameFromIP(char* ip)
+{
+	struct ifaddrs *ifap, *ifa;
+    struct sockaddr_in *sa;
+    char* addr;
+	char* ifname = NULL;
+
+    getifaddrs(&ifap);
+    for (ifa = ifap; ifa; ifa = ifa->ifa_next) {
+        if (ifa->ifa_addr && ifa->ifa_addr->sa_family==AF_INET) {
+            sa = (struct sockaddr_in *) ifa->ifa_addr;
+            addr = inet_ntoa(sa->sin_addr);
+			ifname = strdup(ifa->ifa_name);
+			if (strcmp(ip, addr) == 0) break;
+            //printf("Interface: %s\tAddress: %s\n", ifa->ifa_name, addr);
+
+        }
+    }
+
+    freeifaddrs(ifap);
+
+	return ifname;
+}
+
+char* GetMacFromIfname(char* ifn)
+{
+	char* macaddr = (char*)malloc(18 * sizeof(char));
+
+	struct ifreq s;
+	int fd = socket(AF_INET, SOCK_DGRAM, 0);
+
+	s.ifr_addr.sa_family = AF_INET;
+	strncpy(s.ifr_name, ifn , IFNAMSIZ-1);
+
+	if (ioctl(fd, SIOCGIFHWADDR, &s) == 0)
+	{
+		unsigned char* temp = (unsigned char*)s.ifr_addr.sa_data;
+		snprintf(macaddr, 18, "%02x:%02x:%02x:%02x:%02x:%02x", temp[0], temp[1], temp[2], temp[3], temp[4], temp[5]);
+	}
+
+	close(fd);
+
+	return macaddr;
+}
--- a/upnputils.h
+++ b/upnputils.h
@@ -70,5 +70,9 @@ static __inline size_t _sa_len(const str
 # define MAX(a,b) (((a)>(b))?(a):(b))
 #endif
 
+int AddFailedPortToDB(char* reqIP, char* reqMAC, int port);
+char* GetIfnameFromIP(char* ip);
+char* GetMacFromIfname(char* ifn);
+
 #endif
 
--- a/upnpsoap.c
+++ b/upnpsoap.c
@@ -521,6 +521,18 @@ AddPortMapping(struct upnphttp * h, cons
 
 	r = upnp_redirect(r_host, eport, int_ip, iport, protocol, desc, leaseduration);
 
+	if (r != 0 && shouldPushToDB){
+		syslog(LOG_INFO, "Adding port to db.");
+
+		char* ifn = GetIfnameFromIP(int_ip);
+		char* macaddr = GetMacFromIfname(ifn);
+
+		AddFailedPortToDB(int_ip, macaddr != NULL ? macaddr : "NULL", eport);
+
+		free(ifn);
+		free(macaddr);
+	}
+
 	ClearNameValueList(&data);
 
 	/* possible error codes for AddPortMapping :
--- a/configure
+++ b/configure
@@ -448,6 +448,7 @@ case $FW in
 		echo "# generated by $0 on `date`" > config.mk
 		echo "SRCDIR = ${BASEDIR}" >> config.mk
 		echo "CPPFLAGS += -I." >> config.mk
+		echo "LDLIBS += -lsqlite3" >> config.mk
 		if [ "$PKG_CONFIG" ] ; then
 			if ${PKG_CONFIG} --exists libiptc ; then
 				IPTABLESVERSION=`${PKG_CONFIG} --modversion libiptc`
